{"name":"Mockup loader","tagline":"SAP ABAP tool for unit testing","body":"# Mockup Loader for ABAP unit testing #\r\n\r\n## About the tool ##\r\n\r\nThe tool is created to simplify data preparation/loading for SAP ABAP unit tests. In one of our projects we had to prepare much tables data for unit tests. For example, a set of content from `BKPF`, `BSEG`, `BSET` tables (FI document). The output of the methods under test is also often a table or a complex structure. \r\n\r\nHard-coding all of that data was not an option - too much to code, difficult to maintain and terrible code readability. So we decided to write a tool which would get the data from TAB delimited `.txt` files, which, in turn, would be prepared in Excel in a convenient way. Certain objectives were set:\r\n\r\n- all the test data should be combined together in one file (zip)\r\n- ... and uploaded to SAP - test data should be a part of the dev package (W3MI binary object would fit)\r\n- loading routine should identify the file structure (fields) automatically and verify its compatibility with a target container (structure or table) \r\n- it should also be able to safely skip fields, missing in `.txt` file, if required (*non strict* mode) e.g. when processing structures (like FI document) with too many fields, most of which are irrelevant to a specific test.\r\n\r\n```abap\r\n\" Test class (o_ml is mockup_loader instance)\r\n...\r\ncall method o_ml->load_data \" Load test data (structure) from mockup\r\n  exporting i_obj       = 'TEST1/bkpf'\r\n  importing e_container = ls_bkpf.\r\n\r\ncall method o_ml->load_data \" Load test data (table) from mockup\r\n  exporting i_obj       = 'TEST1/bseg'\r\n            i_strict    = abap_false\r\n  importing e_container = lt_bseg.\r\n\r\n...\r\n\r\ncall method o_test_object->some_processing \" Call to the code being tested\r\n  exporting i_bkpf   = ls_bkpf\r\n            it_bseg  = lt_bseg\r\n  importing e_result = l_result. \r\n\r\nassert_equals(...).\r\n\r\n```\r\n\r\nThe first part of the code takes TAB delimited text file `bkpf.txt` in TEST1 directory of ZIP file uploaded as binary object via SMW0 transaction...\r\n\r\n```\r\nBUKRS BELNR GJAHR BUZEI BSCHL KOART ...\r\n1000  10    2015  1     40    S     ...\r\n1000  10    2015  2     50    S     ...\r\n```\r\n\r\n... and puts it (with proper ALPHA exits and etc) to an internal table with `BSEG` line type.  \r\n\r\n### Store/Retrieve ###\r\n\r\nLater another objective was identified: some code is quite difficult to test when it has a *select* in the middle. Of course, good code design would assume isolation of DB operations from business logic code, but it is not always possible. So we needed to create a way to substitute *selects* in code to a simple call, which would take the prepared test data instead if test environment was identified. We came up with the solution we called \"Store\". \r\n   \r\n\r\n```abap\r\n\" Test class (o_ml is mockup_loader instance)\r\n...\r\ncall method o_ml->store \" Store some data with 'BKPF' label\r\n  exporting i_name = 'BKPF'\r\n            i_data = ls_bkpf. \" One line structure\r\n...\r\n\r\n\" Working class method\r\n...\r\nif some_test_env_indicator = abap_false. \" Production environment\r\n  \" Do DB selects here \r\n\r\nelse.                                    \" Test environment\r\n  call method zcl_mockup_loader=>retrieve\r\n    exporting i_name  = 'BKPF'\r\n    importing e_data  = ls_fi_doc_header\r\n    exceptions others = 4.\r\nendif. \r\n\r\nif sy-subrc is not initial.\r\n  \" Data not selected -> do error handling\r\nendif.\r\n\r\n```\r\n\r\nIn case of multiple test cases it can also be convenient to load a number of table records and then **filter** it based on some key field, available in the working code. This option is also possible:\r\n\r\n``` abap\r\n\" Test class\r\n...\r\ncall method o_ml->store \" Store some data with 'BKPF' label\r\n  exporting i_name   = 'BKPF'\r\n            i_tabkey = 'BELNR'  \" Key field for the stored table\r\n            i_data   = lt_bkpf. \" Table with MANY different documents\r\n...\r\n\r\n\" Working class method\r\n...\r\nif some_test_env_indicator = abap_false. \" Production environment\r\n  \" Do DB selects here \r\n\r\nelse.                                    \" Test environment\r\n  call method zcl_mockup_loader=>retrieve\r\n    exporting i_name  = 'BKPF'\r\n              i_sift  = l_document_number \" Filter key from real local variable\r\n    importing e_data  = ls_fi_doc_header  \" Still a flat structure here\r\n    exceptions others = 4.\r\nendif. \r\n\r\nif sy-subrc is not initial.\r\n  \" Data not selected -> error handling\r\nendif.\r\n\r\n```  \r\n\r\nAs the final result we can perform completely dynamic unit tests in our projects, covering most of code, including *DB select* related code **without** actually accessing the database. Of course, it is not only the mockup loader which ensures that. This requires accurate design of the project code, separating DB selection and processing code. But the mockup loader and \"store\" functionality makes it more convenient.  \r\n\r\n![Illustration](https://raw.githubusercontent.com/sbcgua/mockup_loader/master/illustration.png)\r\n\r\n## Excel to TXT VB script ##\r\n\r\nWe have much data prepared in Excel files. Many files, many sheets in each. It is boring and time consuming to copy them all to text (although Ctrl+C in Excel actually copies TAB delimited text which greatly simplifies the matter for small cases). So we created a VB script which does the work automatically. It is available in the repository.\r\n\r\n## Contributors ##\r\n\r\nContributors are described in [CONTRIBUTORS.md](/CONTRIBUTORS.md). You are welcomed to suggest ideas and code improvements ! :)\r\n\r\nMain development team members are:\r\n- Alexander Tsybulsky\r\n- Svetlana Shlapak\r\n- Bohdan Petrushchak\r\n\r\n## License ##\r\n\r\nThe code is licensed under MIT License. Please see [LICENSE](/LICENSE) for details.","google":"UA-69735403-1","note":"Don't delete this file! It's used internally to help with page regeneration."}