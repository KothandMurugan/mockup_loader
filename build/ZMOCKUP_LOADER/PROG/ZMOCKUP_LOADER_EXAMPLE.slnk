<?xml version="1.0" encoding="utf-8"?>
<PROG NAME="ZMOCKUP_LOADER_EXAMPLE" VARCL="X" SUBC="1" APPL="*" RSTAT="T" RMAND="100" RLOAD="E" FIXPT="X" UCCHECK="X">
 <textPool>
  <language SPRAS="E">
   <textElement ID="R" ENTRY="Mockup loader example program" LENGTH="29 "/>
  </language>
 </textPool>
 <source>*/--------------------------------------------------------------------------------\
*| This file is part of Mockup loader                                             |
*|                                                                                |
*| The MIT License (MIT)                                                          |
*|                                                                                |
*| Copyright (c) 2015 SBCG Team (www.sbcg.com.ua), Alexander Tsybulsky            |
*|                                                                                |
*| Permission is hereby granted, free of charge, to any person obtaining a copy   |
*| of this software and associated documentation files (the &quot;Software&quot;), to deal  |
*| in the Software without restriction, including without limitation the rights   |
*| to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      |
*| copies of the Software, and to permit persons to whom the Software is          |
*| furnished to do so, subject to the following conditions:                       |
*|                                                                                |
*| The above copyright notice and this permission notice shall be included in all |
*| copies or substantial portions of the Software.                                |
*|                                                                                |
*| THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     |
*| IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       |
*| FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    |
*| AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         |
*| LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  |
*| OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  |
*| SOFTWARE.                                                                      |
*\--------------------------------------------------------------------------------/
*/--------------------------------------------------------------------------------\
*| project homepage: https://github.com/sbcgua/mockup_loader                      |
*\--------------------------------------------------------------------------------/

report zmockup_loader_example.

**********************************************************************
* SINGLETON SETTINGS CLASS (a sample way to get test env indicator)
**********************************************************************
class lcl_context definition final create private.

  public section.
    data a_carrid  type sflight-carrid read-only. &quot; Some settings for the production code
    data a_testenv type abap_bool read-only.      &quot; Indicates execution in test environment

    class-methods get_instance
      returning value(ro_instance) type ref to lcl_context.

    methods set_carrid
      importing i_carrid type sflight-carrid.

  private section.
    class-data go_instance type ref to lcl_context.

endclass.  &quot; lcl_context

class lcl_context implementation.
  method get_instance. &quot; Get sinleton instance
    if go_instance is not bound.
      create object go_instance.
    endif.
    ro_instance = go_instance.
  endmethod.

  method set_carrid. &quot; Setup context for production environment
    clear: me-&gt;a_carrid, me-&gt;a_testenv.
    me-&gt;a_carrid = i_carrid.
    if i_carrid = &apos;ZZZ&apos;. &quot; Special test env airline - non existing !
      me-&gt;a_testenv = abap_true.
    endif.
  endmethod.

endclass.  &quot; lcl_context

**********************************************************************
* SOME BUSINESS LOGIC CLASS - the object to test
**********************************************************************
class lcl_main_logic definition final create public.

  public section.
    methods constructor.
    methods get_price
      importing
        i_connid type sflight-connid
        i_date   type sflight-fldate
      returning value(r_price) type sflight-price
      exceptions not_found.

  private section.
    data o_context type ref to lcl_context.

endclass.  &quot; lcl_main_logic

class lcl_main_logic implementation.
  method constructor.
    o_context = lcl_context=&gt;get_instance( ). &quot; Get context
  endmethod.   &quot;constructor

  method get_price. &quot; Get price of the connection in the context airline
    data ls_flight type sflight.

    if o_context-&gt;a_testenv = abap_false. &quot; Production env
      select single price into corresponding fields of ls_flight
        from sflight
        where carrid = o_context-&gt;a_carrid
        and   connid = i_connid
        and   fldate = i_date.
    else.                                  &quot; Test env
      zcl_mockup_loader=&gt;retrieve( exporting i_name = &apos;SFLIGHT&apos;  i_sift = i_connid
                                   importing e_data = ls_flight  exceptions others = 4 ).
    endif.

    if sy-subrc is not initial. &quot; Selection error ?
      raise not_found.
    endif.

    r_price = ls_flight-price.

  endmethod.   &quot;get_price
endclass.  &quot; lcl_main_logic

**********************************************************************
* TEST CLASS
**********************************************************************
class lcl_test definition for testing duration short
  inheriting from cl_aunit_assert  risk level harmless.

  public section.
    types:
      begin of ty_testcase,
        testid   type i,
        type     type char1,
        connid   type sflight-connid,
        result   type sflight-price,
        msg      type string,
      end of ty_testcase.

  private section.
    data o    type ref to lcl_main_logic.    &quot; Class being tested
    data o_ml type ref to zcl_mockup_loader. &quot; Mockup loader

    class-methods: class_setup.
    methods: setup.
    methods: get_price for testing.

endclass.   &quot;lcl_test

class lcl_test implementation.
  method class_setup. &quot; Set mockup source -&gt; workstation file
    zcl_mockup_loader=&gt;class_set_source( i_type = &apos;FILE&apos; i_path = &apos;c:\sap\example.zip&apos; ).
    zcl_mockup_loader=&gt;class_set_params( i_amt_format = &apos; ,&apos; ).
  endmethod.

  method setup. &quot; Initialize instances
    data lo_context type ref to lcl_context.
    data lo_ex      type ref to zcx_mockup_loader_error.

    lo_context = lcl_context=&gt;get_instance( ).
    lo_context-&gt;set_carrid( &apos;ZZZ&apos; ). &quot; Test env airline

    create object o.

    try.
      o_ml = zcl_mockup_loader=&gt;get_instance( ).
    catch zcx_mockup_loader_error into lo_ex.
      fail( lo_ex-&gt;get_text( ) ).
    endtry.

  endmethod.

  method get_price.
    data lt_testcases type table of ty_testcase.
    data ls_case      type ty_testcase.
    data lo_ex        type ref to zcx_mockup_loader_error.
    data l_result     type sflight-price.

    try.
      &quot; Load test cases index for local usage
      o_ml-&gt;load_data( exporting i_obj       = &apos;EXAMPLE/testcases&apos;
                       importing e_container = lt_testcases ).

      &quot; Load and store flights table
      o_ml-&gt;load_and_store( i_obj    = &apos;EXAMPLE/sflight&apos;
                            i_name   = &apos;SFLIGHT&apos;
                            i_strict = abap_false
                            i_tabkey = &apos;CONNID&apos;
                            i_type   = &apos;FLIGHTTAB&apos; ).

    catch zcx_mockup_loader_error into lo_ex.
      fail( lo_ex-&gt;get_text( ) ).
    endtry.

    loop at lt_testcases into ls_case. &quot; Loop through test catalog and run tests
      call method o-&gt;get_price
        exporting
          i_connid = ls_case-connid
          i_date   = &apos;20150101&apos;
        receiving
          r_price  = l_result
        exceptions others = 4.

      if ls_case-type = &apos;+&apos;. &quot; Positive test
        assert_subrc(  act = sy-subrc  exp = 0
                       msg = |[{ ls_case-testid }] { ls_case-msg }| ).
        assert_equals( act = l_result  exp = ls_case-result
                       msg = |[{ ls_case-testid }] { ls_case-msg }| ).

      else. &quot;&apos;-&apos;             &quot; Negative test
        assert_subrc(  act = sy-subrc  exp = 4
                       msg = |[{ ls_case-testid }] { ls_case-msg }| ).
      endif.

    endloop.

  endmethod.

endclass.   &quot;lcl_test</source>
</PROG>
